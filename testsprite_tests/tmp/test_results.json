[
  {
    "projectId": "c90b8b64-df73-4f07-9099-331b6c59fb40",
    "testId": "a31fef32-ecc9-4d8d-928f-792b97a5189c",
    "userId": "94a87458-8051-70f6-1a53-f7c56d60303e",
    "title": "TC001-Homepage Start Free Trial CTAs Navigation",
    "description": "Verify that all 'Start Free Trial' call-to-action buttons on the homepage navigate to the /login page in signup mode and do not lead directly to payment.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Click the first 'Start Free Trial' button at index 1 and verify navigation\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/header/nav/div[2]/a[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Go back to homepage to test the next 'Start Free Trial' button\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/nav/a[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click the 'Start Free Trial' button at index 4 and verify navigation\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/header/div[2]/div/div[2]/a[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click 'Back to Home' link to return to homepage and continue testing remaining 'Start Free Trial' buttons\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/nav/a[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click the 'Start Free Trial' button at index 6 and verify navigation\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/section[3]/div/div[2]/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Go back to homepage to test the last 'Start Free Trial' button on desktop view\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/nav/a[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click the last 'Start Free Trial' button at index 7 and verify navigation\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/section[3]/div/div[2]/div[2]/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Switch to mobile viewport and reload homepage to test mobile 'Start Free Trial' buttons\n        await page.goto('http://localhost:3000', timeout=10000)\n        \n\n        # Click the first visible 'Start Free Trial' button at index 1 in mobile view and verify navigation\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/header/nav/div[2]/a[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click 'Back to Home' link to return to homepage and continue testing remaining 'Start Free Trial' buttons in mobile view\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/nav/a[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click 'Back to Home' link to return to homepage and continue testing remaining 'Start Free Trial' buttons in mobile view\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/header/nav/div[2]/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click the 'Back to Home' link at index 1 to return to homepage and continue testing remaining 'Start Free Trial' buttons in mobile view\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/nav/a[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click the 'Start Free Trial' button at index 4 and verify navigation in mobile view\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/header/div[2]/div/div[2]/a[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Assert that the current URL is the /login page with signup mode after clicking 'Start Free Trial' buttons\n        assert '/login' in page.url, f\"Expected to be on /login page, but got {page.url}\"\n        assert 'signup' in page.url or 'mode=signup' in page.url, f\"Expected signup mode in URL, but got {page.url}\"\n        # Assert that the URL does not contain any direct payment page keywords\n        assert 'payment' not in page.url, f\"URL should not lead directly to payment, but got {page.url}\"\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/94a87458-8051-70f6-1a53-f7c56d60303e/1760611207244947//tmp/test_task/result.webm",
    "created": "2025-10-16T10:31:59.444Z",
    "modified": "2025-10-16T10:40:07.426Z"
  },
  {
    "projectId": "c90b8b64-df73-4f07-9099-331b6c59fb40",
    "testId": "1d4d69c2-e583-4aa0-b660-cf5f689d03a9",
    "userId": "94a87458-8051-70f6-1a53-f7c56d60303e",
    "title": "TC002-Homepage Absence of Direct Payment Links",
    "description": "Ensure the homepage does not contain any direct links or buttons initiating Flutterwave payment flows outside of the upgrade process.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Scroll and inspect the homepage for any direct links or buttons initiating Flutterwave payment flows outside of the upgrade process, especially in pricing cards and other CTAs.\n        await page.mouse.wheel(0, 1000)\n        \n\n        # Assert no direct Flutterwave payment links or buttons outside upgrade process\n        flutterwave_payment_selectors = ['a[href*=\"flutterwave\"], button[data-payment=\"flutterwave\"]']\n        for selector in flutterwave_payment_selectors:\n            elements = await page.query_selector_all(selector)\n            assert len(elements) == 0, f\"Found direct Flutterwave payment element with selector: {selector}\"\n          \n        # Assert pricing cards show 'FREE TRIAL FIRST' badges and no payment triggers\n        pricing_cards = await page.query_selector_all('.pricing-card')\n        for card in pricing_cards:\n            badge = await card.query_selector('text=FREE TRIAL FIRST')\n            assert badge is not None, \"Pricing card missing 'FREE TRIAL FIRST' badge\"\n            # Check no payment action triggers inside pricing card\n            payment_buttons = await card.query_selector_all('a[href*=\"flutterwave\"], button[data-payment=\"flutterwave\"]')\n            assert len(payment_buttons) == 0, \"Pricing card contains direct payment triggers\"\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/94a87458-8051-70f6-1a53-f7c56d60303e/1760610901016808//tmp/test_task/result.webm",
    "created": "2025-10-16T10:31:59.451Z",
    "modified": "2025-10-16T10:35:01.173Z"
  },
  {
    "projectId": "c90b8b64-df73-4f07-9099-331b6c59fb40",
    "testId": "069538c4-4a38-482e-817f-a12f71fc9c8d",
    "userId": "94a87458-8051-70f6-1a53-f7c56d60303e",
    "title": "TC003-Authentication Flow - Email/Password Signup and Login Without Payment",
    "description": "Validate that new users can sign up and existing users can log in via email/password without any upfront payment requirements.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Click on 'Log In' to go to login page\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/header/nav/div[2]/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on 'Sign up' link to go to signup page\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[3]/p/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Fill in Full Name, Email, Password fields and click Create Account button\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('John Doe')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div[3]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('john.doe.testing@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div[4]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestPassword123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Clear the email field, input a new valid email address with a common domain, and submit the form again.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div[3]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div[3]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('john.doe.testing@gmail.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click 'Go to Sign In' to navigate to the login page to test login flow.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Fill in email and password fields with registered user credentials and click Sign In.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('john.doe.testing@gmail.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div[2]/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestPassword123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Logout if logged in (not applicable here), then create a new user with an email that is pre-verified or bypass email verification to test login flow without email confirmation blocking.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[4]/p/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Fill in Full Name, Email, Password fields with new user data and submit the signup form.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('Jane Tester')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div[3]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('jane.tester.testing@gmail.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div[4]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestPassword123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click 'Go to Sign In' to navigate to login page to test login flow after verification.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Input registered email and password for jane.tester.testing@gmail.com and attempt to sign in.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('jane.tester.testing@gmail.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div[2]/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestPassword123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Since email verification is required and cannot be bypassed here, proceed to logout if possible, then verify no payment prompt appears during signup or login attempts.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/nav/a[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click 'Log In' to verify login flow again or 'Start Free Trial' to check signup flow for any payment prompts.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/header/nav/div[2]/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Input registered email and password for a verified user and click Sign In to test login flow without payment prompt.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('verified.user@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div[2]/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestPassword123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Tested signup and login flows for new and existing users. Signup works with email verification required. Login blocked for unverified emails as expected. Attempted login with verified user credentials failed due to invalid credentials. No upfront payment prompt appeared during signup or login. Issue reported for invalid login credentials with verified user. Task stopped.\nBrowser Console Logs:\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://bcufohulqrceytkrqpgd.supabase.co/auth/v1/signup?redirect_to=http%3A%2F%2Flocalhost%3A3000%2Fauth%2Fcallback:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://bcufohulqrceytkrqpgd.supabase.co/auth/v1/token?grant_type=password:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://bcufohulqrceytkrqpgd.supabase.co/auth/v1/token?grant_type=password:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://bcufohulqrceytkrqpgd.supabase.co/auth/v1/token?grant_type=password:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/94a87458-8051-70f6-1a53-f7c56d60303e/1760611223354141//tmp/test_task/result.webm",
    "created": "2025-10-16T10:31:59.458Z",
    "modified": "2025-10-16T10:40:23.531Z"
  },
  {
    "projectId": "c90b8b64-df73-4f07-9099-331b6c59fb40",
    "testId": "f1b9f568-0fa0-4c0f-aa12-dd49a4824277",
    "userId": "94a87458-8051-70f6-1a53-f7c56d60303e",
    "title": "TC004-Authentication Flow - Google OAuth Login Without Payment",
    "description": "Verify users can authenticate using the Google OAuth flow and gain access to the dashboard without upfront payment.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Click on the Log In button to navigate to the login page\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/header/nav/div[2]/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on the 'Sign in with Google' button to initiate Google OAuth flow\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Generic failing assertion since expected result is unknown\n        assert False, 'Test failed: Expected result unknown, forcing failure.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Google OAuth login flow cannot be completed due to redirect_uri_mismatch error. User cannot authenticate or access the dashboard. No payment screen was encountered because login did not succeed. Please fix the OAuth redirect URI configuration to enable Google login.",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/94a87458-8051-70f6-1a53-f7c56d60303e/176061094207583//tmp/test_task/result.webm",
    "created": "2025-10-16T10:31:59.463Z",
    "modified": "2025-10-16T10:35:42.229Z"
  },
  {
    "projectId": "c90b8b64-df73-4f07-9099-331b6c59fb40",
    "testId": "9068defb-1e8d-4389-969c-2014e01f39b0",
    "userId": "94a87458-8051-70f6-1a53-f7c56d60303e",
    "title": "TC005-Dashboard Accessibility During Free Trial",
    "description": "Confirm that trial users can fully access AI features and usage statistics on the dashboard before making any payment.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Click on Log In to proceed with trial user login.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/header/nav/div[2]/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Input trial user email and password, then click Sign In.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('trialuser@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div[2]/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TrialUserPassword123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Request valid trial user credentials or try alternative login methods such as 'Sign in with Google' if applicable.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Generic failing assertion since expected result is unknown\n        assert False, 'Test plan execution failed: generic failure assertion'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Testing stopped due to inability to login as trial user. Login attempts failed with invalid credentials and Google OAuth sign-in blocked by redirect_uri_mismatch error. Cannot confirm trial user access to AI features and usage statistics on dashboard. Please resolve authentication issues to enable testing.\nBrowser Console Logs:\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://bcufohulqrceytkrqpgd.supabase.co/auth/v1/token?grant_type=password:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/94a87458-8051-70f6-1a53-f7c56d60303e/1760611003310371//tmp/test_task/result.webm",
    "created": "2025-10-16T10:31:59.468Z",
    "modified": "2025-10-16T10:36:43.451Z"
  },
  {
    "projectId": "c90b8b64-df73-4f07-9099-331b6c59fb40",
    "testId": "d356918e-0b61-4221-844b-57bd56f7e70d",
    "userId": "94a87458-8051-70f6-1a53-f7c56d60303e",
    "title": "TC006-Dashboard Sidebar 'Upgrade to Pro' Menu Item Presence and Styling",
    "description": "Verify the presence, visibility, and styling of the 'Upgrade to Pro' menu item in the dashboard sidebar, and that it links correctly to the upgrade page.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Click the 'Log In' button to start login process\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/header/nav/div[2]/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Input email and password, then click 'Sign In' button\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div[2]/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestPassword123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, \"Test plan execution failed: generic failure assertion.\"\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Login attempt failed due to invalid credentials. Cannot proceed to verify 'Upgrade to Pro' menu item in dashboard sidebar without successful login. Please provide valid credentials or alternative access method.\nBrowser Console Logs:\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://bcufohulqrceytkrqpgd.supabase.co/auth/v1/token?grant_type=password:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/94a87458-8051-70f6-1a53-f7c56d60303e/176061082960872//tmp/test_task/result.webm",
    "created": "2025-10-16T10:31:59.473Z",
    "modified": "2025-10-16T10:33:49.764Z"
  },
  {
    "projectId": "c90b8b64-df73-4f07-9099-331b6c59fb40",
    "testId": "462771d8-91fe-4193-af03-4ce73c45c297",
    "userId": "94a87458-8051-70f6-1a53-f7c56d60303e",
    "title": "TC007-Upgrade Page Load and Mobile Responsiveness Verification",
    "description": "Ensure the upgrade page loads successfully on desktop and mobile, displays all pricing plans, FAQs, and guarantee information clearly and accurately.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Navigate to /dashboard/upgrade page on desktop\n        await page.goto('http://localhost:3000/dashboard/upgrade', timeout=10000)\n        \n\n        # Input email and password to sign in and access upgrade page\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div[2]/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestPassword123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Final generic failing assertion since expected result is unknown\n        assert False, 'Test plan execution failed: generic failure assertion'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Task stopped due to inability to login and access the upgrade page. The login credentials provided are invalid, preventing further testing of the upgrade page. Please verify credentials or fix authentication issues to proceed.\nBrowser Console Logs:\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://bcufohulqrceytkrqpgd.supabase.co/auth/v1/token?grant_type=password:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/94a87458-8051-70f6-1a53-f7c56d60303e/176061084119827//tmp/test_task/result.webm",
    "created": "2025-10-16T10:31:59.478Z",
    "modified": "2025-10-16T10:34:01.362Z"
  },
  {
    "projectId": "c90b8b64-df73-4f07-9099-331b6c59fb40",
    "testId": "9d97bd93-76f2-4b0a-b6de-77fb205dffaa",
    "userId": "94a87458-8051-70f6-1a53-f7c56d60303e",
    "title": "TC008-Payment Link Generation and Flutterwave Integration",
    "description": "Test that selecting a pricing plan on the upgrade page correctly initiates the Flutterwave payment process, generates valid payment links, and handles success and failure scenarios.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Click on Pricing link to go to upgrade page\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/footer/div/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on Starter plan's Start Free Trial button to initiate payment\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/section[3]/div/div[2]/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Fill in email and password fields and click Sign In button\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div[2]/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestPassword123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Navigate back to pricing page to check if payment initiation can be tested without login or try alternative login methods.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/nav/a[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on Pricing link to navigate to upgrade page again\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/footer/div/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on Starter plan's Start Free Trial button to initiate payment\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/section[3]/div/div[2]/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Input valid email and password, then click Sign In button\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('validuser@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div[2]/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('ValidPassword123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Testing stopped due to repeated login failures preventing access to upgrade page and payment initiation. Issue reported for resolution.\nBrowser Console Logs:\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://bcufohulqrceytkrqpgd.supabase.co/auth/v1/token?grant_type=password:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://bcufohulqrceytkrqpgd.supabase.co/auth/v1/token?grant_type=password:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/94a87458-8051-70f6-1a53-f7c56d60303e/1760611028621775//tmp/test_task/result.webm",
    "created": "2025-10-16T10:31:59.483Z",
    "modified": "2025-10-16T10:37:08.758Z"
  },
  {
    "projectId": "c90b8b64-df73-4f07-9099-331b6c59fb40",
    "testId": "a4d5323d-7a59-483e-9969-44b23ebb1d53",
    "userId": "94a87458-8051-70f6-1a53-f7c56d60303e",
    "title": "TC009-Post-Payment User Setup and Live AI Deployment Timeline",
    "description": "Verify that after successful payment, user setup for live AI deployment is triggered and completed within the expected 48-hour SLA.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Click on 'Start Free Trial' to begin the payment upgrade flow.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/header/nav/div[2]/a[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Input email and password, then click 'Sign In' to authenticate.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div[2]/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestPassword123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Try to use 'Sign in with Google' button to authenticate or navigate to 'Forgot password?' to recover credentials.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Generic failing assertion since expected result is unknown\n        assert False, 'Test plan execution failed: generic failure assertion'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Testing cannot proceed due to authentication failures caused by invalid login credentials and Google OAuth redirect URI mismatch error. These issues block user sign-in and prevent triggering the payment upgrade flow and backend webhook. Please fix authentication issues to enable further testing.\nBrowser Console Logs:\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://bcufohulqrceytkrqpgd.supabase.co/auth/v1/token?grant_type=password:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/94a87458-8051-70f6-1a53-f7c56d60303e/1760610981826541//tmp/test_task/result.webm",
    "created": "2025-10-16T10:31:59.487Z",
    "modified": "2025-10-16T10:36:21.986Z"
  },
  {
    "projectId": "c90b8b64-df73-4f07-9099-331b6c59fb40",
    "testId": "b1678060-90f5-4378-9772-62d51d79ebc0",
    "userId": "94a87458-8051-70f6-1a53-f7c56d60303e",
    "title": "TC010-Navigation Consistency and Clarity Across Pages",
    "description": "Verify that navigation elements such as 'Log In' and 'Start Free Trial' buttons appear distinctly and correctly on all relevant pages (homepage, login, dashboard) maintaining consistency and clarity.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Click on 'Log In' button to navigate to the login page and verify buttons there.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/header/nav/div[2]/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Navigate to dashboard page by logging in or simulate login to check navigation elements there.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div[2]/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestPassword123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Final generic failing assertion since expected result is unknown\n        assert False, 'Test plan execution failed: generic failure assertion'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Testing stopped due to login failure preventing dashboard access. Homepage and login page navigation elements verified. Login failure issue reported for resolution.\nBrowser Console Logs:\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://bcufohulqrceytkrqpgd.supabase.co/auth/v1/token?grant_type=password:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/94a87458-8051-70f6-1a53-f7c56d60303e/1760610866652012//tmp/test_task/result.webm",
    "created": "2025-10-16T10:31:59.492Z",
    "modified": "2025-10-16T10:34:26.782Z"
  },
  {
    "projectId": "c90b8b64-df73-4f07-9099-331b6c59fb40",
    "testId": "b11dcb60-c97b-48e0-b9df-151c93b87a25",
    "userId": "94a87458-8051-70f6-1a53-f7c56d60303e",
    "title": "TC011-Error Handling for Authentication Failures",
    "description": "Confirm that invalid login attempts (incorrect credentials, unregistered email) are handled gracefully with user-friendly error messages, without revealing sensitive system information.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Click on 'Log In' link to go to login page\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/header/nav/div[2]/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Input invalid email format and submit\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('invalid-email-format')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div[2]/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('anyPassword123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Input unregistered email with valid password and submit\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('unregistered@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div[2]/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('ValidPassword123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Input registered email with wrong password and submit\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('registered@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div[2]/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('WrongPassword123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Assert error message for invalid email format is displayed\n        error_locator = frame.locator('text=Invalid email format')\n        assert await error_locator.is_visible()\n        \\n# Assert error message for unregistered email and valid password is displayed without specifying which field\n        error_locator = frame.locator('text=Invalid login credentials')\n        assert await error_locator.is_visible()\n        \\n# Assert error message for registered email with wrong password is displayed without revealing sensitive info\n        error_locator = frame.locator('text=Invalid login credentials')\n        assert await error_locator.is_visible()\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/94a87458-8051-70f6-1a53-f7c56d60303e/1760610931354305//tmp/test_task/result.webm",
    "created": "2025-10-16T10:31:59.497Z",
    "modified": "2025-10-16T10:35:31.501Z"
  },
  {
    "projectId": "c90b8b64-df73-4f07-9099-331b6c59fb40",
    "testId": "76ce66f3-715f-40c6-b397-f1a9d9b7b7d1",
    "userId": "94a87458-8051-70f6-1a53-f7c56d60303e",
    "title": "TC012-Error Handling for Payment Failures and Edge Cases",
    "description": "Validate that payment failures from Flutterwave (network issues, declined card, canceled payment) are gracefully handled with informative messages, and user remains on upgrade page without inconsistent state.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Click on 'Start Free Trial' to initiate upgrade/payment process.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/header/nav/div[2]/a[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Input email and password, then click Sign In to access dashboard and proceed to upgrade page.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div[2]/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestPassword123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion as expected.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Testing stopped due to inability to log in with provided credentials. Login failure blocks access to upgrade/payment page, preventing validation of Flutterwave payment failure handling. Please provide valid credentials or fix login issue to continue testing.\nBrowser Console Logs:\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://bcufohulqrceytkrqpgd.supabase.co/auth/v1/token?grant_type=password:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/94a87458-8051-70f6-1a53-f7c56d60303e/1760610859071045//tmp/test_task/result.webm",
    "created": "2025-10-16T10:31:59.502Z",
    "modified": "2025-10-16T10:34:19.204Z"
  },
  {
    "projectId": "c90b8b64-df73-4f07-9099-331b6c59fb40",
    "testId": "30070b0f-2dc5-4c5d-8e93-daab5fc4c005",
    "userId": "94a87458-8051-70f6-1a53-f7c56d60303e",
    "title": "TC013-Metrics Tracking and Conversion Rate Verification",
    "description": "Confirm that critical metrics for signups, dashboard usage, and trial-to-paid conversion rates are tracked accurately and reflect expected improvements after implementing the free trial flow.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Click the first 'Start Free Trial' button to begin a user signup for free trial.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/header/nav/div[2]/a[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on 'Sign up' link to start the signup process for free trial.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[3]/p/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Fill the signup form with user details and submit to create a free trial account.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('Test User One')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('Test Company One')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div[3]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuserone@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div[4]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('password123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Change the email address to a different valid format and try submitting the signup form again.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div[3]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuserone@validemail.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Simulate email verification and sign in to dashboard to simulate usage of dashboard AI features by trial user.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Input email and password for the first trial user and click Sign In to access the dashboard.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuserone@validemail.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div[2]/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('password123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Navigate to home page to start another signup or simulate email confirmation if possible.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/nav/a[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click the next 'Start Free Trial' button to begin a second user signup for free trial.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/header/div[2]/div/div[2]/a[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on 'Sign up' link to start the signup process for the second free trial user.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[3]/p/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Fill the signup form with second user details and submit to create a free trial account.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('Test User Two')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('Test Company Two')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div[3]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testusertwo@validemail.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div[4]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('password123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Return to home page to initiate dashboard usage simulation or additional signups.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/nav/a[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Attempt to sign in with a confirmed user or simulate email confirmation to proceed with dashboard usage simulation.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/header/nav/div[2]/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Attempt to sign in with a confirmed user or simulate email confirmation to proceed with dashboard usage simulation.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuserone@validemail.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div[2]/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('password123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Assertion: Verify that the signup and conversion metrics are tracked correctly in the analytics system.\n        # Since this is a UI test, we simulate checking the presence of analytics tracking calls or dashboard metrics display.\n        # Example: Check if the dashboard shows expected metrics after signups and upgrades.\n        dashboard_metrics = await frame.locator('xpath=//div[contains(@class, \"dashboard-metrics\")]').all_text_contents()\n        assert any('Signups' in metric for metric in dashboard_metrics), \"Signups metric not found in dashboard metrics\"\n        assert any('Dashboard Usage' in metric for metric in dashboard_metrics), \"Dashboard usage metric not found in dashboard metrics\"\n        assert any('Trial to Paid Conversion' in metric for metric in dashboard_metrics), \"Trial to paid conversion metric not found in dashboard metrics\"\n        # Additional assertion: Check if conversion rate has increased post implementation, assuming pre-implementation rate is known (e.g., 10%)\n        conversion_rate_text = next((metric for metric in dashboard_metrics if 'Conversion Rate' in metric), None)\n        assert conversion_rate_text is not None, \"Conversion rate metric not found\"\n        conversion_rate_value = float(conversion_rate_text.split(':')[-1].strip().replace('%',''))\n        assert conversion_rate_value > 10, f\"Conversion rate {conversion_rate_value}% did not increase as expected\"\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/94a87458-8051-70f6-1a53-f7c56d60303e/1760611214647997//tmp/test_task/result.webm",
    "created": "2025-10-16T10:31:59.507Z",
    "modified": "2025-10-16T10:40:14.825Z"
  },
  {
    "projectId": "c90b8b64-df73-4f07-9099-331b6c59fb40",
    "testId": "89fdb670-85ad-4f9c-a46f-b426372e406b",
    "userId": "94a87458-8051-70f6-1a53-f7c56d60303e",
    "title": "TC014-Support Request Reduction for Trial and Payment Confusion",
    "description": "Verify that support tickets relating to confusion about free trial and payment requirements drop to zero after launch of new user flows.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Locate and access support ticket categorization data before feature rollout.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/footer/div/div/a[3]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test failed: Expected result unknown, generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Support ticket categorization data is not accessible or visible on the local development server homepage or via the 'Contact' button. Unable to proceed with verification of support tickets related to free trial and payment confusion. Task stopped.",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/94a87458-8051-70f6-1a53-f7c56d60303e/1760610825421186//tmp/test_task/result.webm",
    "created": "2025-10-16T10:31:59.511Z",
    "modified": "2025-10-16T10:33:45.600Z"
  },
  {
    "projectId": "c90b8b64-df73-4f07-9099-331b6c59fb40",
    "testId": "5dbff61f-dbf3-4be4-b266-43cfe4c19ab2",
    "userId": "94a87458-8051-70f6-1a53-f7c56d60303e",
    "title": "TC015-Application Build and Route Update Validation",
    "description": "Ensure the application builds successfully without errors and all new or updated routes (/login, /dashboard/upgrade, etc.) work correctly with the latest code changes.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Verify routing and content for /login page\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/header/nav/div[2]/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Verify routing and content for /signup page\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[3]/p/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Verify routing and content for /dashboard page\n        await page.goto('http://localhost:3000/dashboard', timeout=10000)\n        \n\n        # Sign in to the application to access the /dashboard page and verify its content\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div[2]/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestPassword123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion as expected result is unknown.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "The application build and routing verification task cannot be completed due to authentication failure. Login attempts with provided test credentials failed, preventing access to protected routes /dashboard and /dashboard/upgrade. Please resolve authentication issues and provide valid credentials to continue testing.\nBrowser Console Logs:\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://bcufohulqrceytkrqpgd.supabase.co/auth/v1/token?grant_type=password:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/94a87458-8051-70f6-1a53-f7c56d60303e/1760610899818417//tmp/test_task/result.webm",
    "created": "2025-10-16T10:31:59.516Z",
    "modified": "2025-10-16T10:34:59.951Z"
  }
]
