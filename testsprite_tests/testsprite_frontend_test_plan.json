[
  {
    "id": "TC001",
    "title": "Render Chat Widget Bubble on Page Load",
    "description": "Verify that the floating chat widget bubble appears immediately upon loading the website, is properly positioned, and is clickable without visual defects.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Navigate to website landing page on desktop browser"
      },
      {
        "type": "assertion",
        "description": "Check that the floating chat bubble is visible, correctly positioned, and styled as per design"
      },
      {
        "type": "action",
        "description": "Repeat test on mobile browser viewport"
      },
      {
        "type": "assertion",
        "description": "Confirm chat bubble is visible, correctly positioned, responsive, and functional on mobile"
      }
    ]
  },
  {
    "id": "TC002",
    "title": "Expand Chat Window on Bubble Click",
    "description": "Verify that clicking the floating chat bubble expands into full chat window with both text and voice input modes selectable.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Click on the floating chat bubble"
      },
      {
        "type": "assertion",
        "description": "Chat window expands with visible UI controls for text input textbox and voice input mode button"
      },
      {
        "type": "assertion",
        "description": "Animations for expansion run smoothly without glitches"
      }
    ]
  },
  {
    "id": "TC003",
    "title": "Send Text Message and Receive AI Response",
    "description": "Verify sending a text message triggers webhook POST to n8n workflow, AI GPT-4 generates response within 3 seconds, and response text is displayed in chat window.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Open chat window and select text input mode"
      },
      {
        "type": "action",
        "description": "Enter a valid user message and click send"
      },
      {
        "type": "assertion",
        "description": "Check webhook POST is triggered with correct JSON payload"
      },
      {
        "type": "assertion",
        "description": "AI GPT-4 response arrives within 3 seconds"
      },
      {
        "type": "assertion",
        "description": "Response text is displayed accurately and contextually in chat window"
      }
    ]
  },
  {
    "id": "TC004",
    "title": "Record Voice Message, Send and Receive TTS Audio Response",
    "description": "Verify voice recording starts/stops correctly with visible timer, the recorded audio is sent via webhook, TTS audio is received and auto-played, and corresponding text response is shown.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Open chat window and select voice input mode"
      },
      {
        "type": "action",
        "description": "Start recording voice message and verify recording timer visibility and accuracy"
      },
      {
        "type": "action",
        "description": "Stop recording to send the audio message"
      },
      {
        "type": "assertion",
        "description": "Recorded audio is correctly captured and transmitted in webhook POST"
      },
      {
        "type": "assertion",
        "description": "MiniMax TTS returns audio URL for AI generated response"
      },
      {
        "type": "assertion",
        "description": "Chat widget displays AI text response and auto-plays the TTS audio response"
      }
    ]
  },
  {
    "id": "TC005",
    "title": "Switch Input Modes Seamlessly Mid-Conversation",
    "description": "Verify user can switch between text and voice input modes during ongoing conversation without loss of chat history or UI glitches.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Start a conversation using text input mode and send a message"
      },
      {
        "type": "assertion",
        "description": "Chat history is displayed with AI responses"
      },
      {
        "type": "action",
        "description": "Switch to voice input mode"
      },
      {
        "type": "assertion",
        "description": "UI updates correctly for voice mode with visible recording controls and timer"
      },
      {
        "type": "action",
        "description": "Send voice message and receive AI response"
      },
      {
        "type": "assertion",
        "description": "Conversation history remains intact and updated"
      },
      {
        "type": "action",
        "description": "Switch back to text mode and verify input box is active"
      },
      {
        "type": "assertion",
        "description": "No UI lag or glitches occur"
      }
    ]
  },
  {
    "id": "TC006",
    "title": "Handle Invalid Input Gracefully",
    "description": "Verify the system handles invalid inputs such as empty messages, excessively long texts, or corrupted voice files by showing appropriate errors without crashes.",
    "category": "error handling",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Attempt to send empty text message"
      },
      {
        "type": "assertion",
        "description": "UI prevents sending empty message and shows validation warning"
      },
      {
        "type": "action",
        "description": "Input excessively long text message exceeding limit and attempt to send"
      },
      {
        "type": "assertion",
        "description": "UI shows error or truncates with appropriate user feedback"
      },
      {
        "type": "action",
        "description": "Simulate corrupted or unsupported voice recording file upload and try send"
      },
      {
        "type": "assertion",
        "description": "Chat widget displays error and prevents sending corrupted audio"
      }
    ]
  },
  {
    "id": "TC007",
    "title": "Security: Verify API Key and CORS Restrictions",
    "description": "Ensure the API keys for GPT-4 and TTS services are securely managed and not exposed in client code, and CORS policies restrict unauthorized origins.",
    "category": "security",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Inspect client-side source code and network requests for API key exposure"
      },
      {
        "type": "assertion",
        "description": "No API keys are exposed in client bundles or requests"
      },
      {
        "type": "action",
        "description": "Attempt to send webhook requests from unauthorized origins"
      },
      {
        "type": "assertion",
        "description": "Requests from unauthorized origins are blocked via CORS policy"
      }
    ]
  },
  {
    "id": "TC008",
    "title": "Performance: Verify AI Response Time Under Load",
    "description": "Validate that the AI text response is generated and displayed within 3 seconds under normal and moderate load conditions.",
    "category": "performance",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Send multiple consecutive text messages simulating typical user usage"
      },
      {
        "type": "assertion",
        "description": "Each AI response arrives and is displayed within 3 seconds on average"
      },
      {
        "type": "action",
        "description": "Simulate moderate concurrent users sending messages"
      },
      {
        "type": "assertion",
        "description": "Response latency remains within 3 seconds threshold"
      }
    ]
  },
  {
    "id": "TC009",
    "title": "Verify Chat Widget Loading, Loading Indicators and Error Boundaries",
    "description": "Ensure loading states, such as while waiting for AI or TTS responses, show appropriate indicators, and error boundaries catch and display recoverable errors.",
    "category": "ui",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Send message and observe loading animation while waiting for AI response"
      },
      {
        "type": "assertion",
        "description": "Loading indicator is visible and consistent with UI design"
      },
      {
        "type": "action",
        "description": "Force an API failure (e.g. disconnect network) during response wait"
      },
      {
        "type": "assertion",
        "description": "Error boundary catches failure and shows helpful error message without crashing chat widget"
      }
    ]
  },
  {
    "id": "TC010",
    "title": "Use test-webhook.js to Validate Webhook Output Format",
    "description": "Run the command-line webhook tester tool (`test-webhook.js`) to check that the webhook response contains expected JSON fields `text` and `audio_url` conforming to API contract.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Run `node test-webhook.js` with sample input"
      },
      {
        "type": "assertion",
        "description": "Output JSON contains `text` field with AI response string"
      },
      {
        "type": "assertion",
        "description": "Output JSON contains `audio_url` field with valid URL string to TTS audio"
      }
    ]
  },
  {
    "id": "TC011",
    "title": "Import and Execute n8n Workflows Without Errors",
    "description": "Confirm n8n workflows for webhook triggers, AI GPT-4 processing, TTS generation, and audio URL delivery import correctly, execute sequentially, and produce valid results.",
    "category": "integration",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Import provided n8n workflows into n8n environment"
      },
      {
        "type": "assertion",
        "description": "Workflows import without error messages"
      },
      {
        "type": "action",
        "description": "Trigger workflows with test webhook payload"
      },
      {
        "type": "assertion",
        "description": "Workflows execute all steps in proper order: webhook -> AI generation -> TTS generation -> output"
      },
      {
        "type": "assertion",
        "description": "Final output JSON contains valid AI text response and audio URL"
      }
    ]
  },
  {
    "id": "TC012",
    "title": "Cross-Browser and Device Compatibility",
    "description": "Verify the chat widget renders and functions correctly with consistent UI and features on major browsers (Chrome, Firefox, Safari, Edge) and devices (desktop, tablet, mobile).",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Open website and initiate chat widget on Chrome desktop"
      },
      {
        "type": "assertion",
        "description": "Chat widget fully functional and visually consistent"
      },
      {
        "type": "action",
        "description": "Repeat on Firefox, Safari, and Edge browsers"
      },
      {
        "type": "assertion",
        "description": "Chat function and UI consistent and audio playback supported"
      },
      {
        "type": "action",
        "description": "Test on mobile devices with various OS and screen sizes"
      },
      {
        "type": "assertion",
        "description": "Responsive layout, touch interactions, and voice recording functionality operate error-free"
      }
    ]
  },
  {
    "id": "TC013",
    "title": "Verify Production Deployment Security Best Practices",
    "description": "Ensure production deployment enforces HTTPS, implements rate limiting, secures environment variables, and applies all security best practices as per documentation.",
    "category": "security",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Access production deployment URL without HTTPS"
      },
      {
        "type": "assertion",
        "description": "Connection is forced to HTTPS"
      },
      {
        "type": "action",
        "description": "Simulate high-frequency API requests to test rate limiting"
      },
      {
        "type": "assertion",
        "description": "Rate limiting throttles or blocks excessive requests"
      },
      {
        "type": "action",
        "description": "Review deployed environment variables for secure storage and non-exposure"
      },
      {
        "type": "assertion",
        "description": "No sensitive info visible or leaked in logs or client code"
      }
    ]
  },
  {
    "id": "TC014",
    "title": "Validate Documentation Completeness and Clarity",
    "description": "Review complete documentation suite to ensure coverage of setup, configuration, troubleshooting, usage tips, and deployment instructions with clear and correct information.",
    "category": "documentation",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Read installation and setup guides"
      },
      {
        "type": "assertion",
        "description": "Instructions are clear, unambiguous, and reproduce expected system state"
      },
      {
        "type": "action",
        "description": "Review troubleshooting and debugging sections"
      },
      {
        "type": "assertion",
        "description": "Common issues and solutions are properly documented"
      },
      {
        "type": "action",
        "description": "Check usage tips and production deployment guidelines"
      },
      {
        "type": "assertion",
        "description": "Materials enable smooth integration and deployment without major gaps"
      }
    ]
  }
]
