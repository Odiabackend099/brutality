{
  "name": "CallWaiting AI â€¢ WhatsApp AI Handler",
  "nodes": [
    {
      "id": "webhook_whatsapp",
      "name": "Webhook - WhatsApp (Twilio/Meta)",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [200, 300],
      "parameters": {
        "path": "whatsapp/incoming",
        "httpMethod": "POST",
        "responseMode": "lastNode",
        "options": {}
      },
      "webhookMethods": { "POST": true }
    },
    {
      "id": "respond_200_wa",
      "name": "Respond 200 Immediately",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [420, 300],
      "parameters": {
        "responseBody": "={\"status\": \"received\"}",
        "responseCode": 200
      }
    },
    {
      "id": "parse_whatsapp_message",
      "name": "Parse WhatsApp Message",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [640, 200],
      "parameters": {
        "functionCode": "// Twilio WhatsApp format\nconst body = $json.body || $json;\n\n// Extract message details\nconst message = {\n  from: body.From || body.from, // Format: whatsapp:+1234567890\n  to: body.To || body.to,\n  body: (body.Body || body.body || '').trim(),\n  messageId: body.MessageSid || body.message_id,\n  timestamp: new Date().toISOString(),\n  media: body.MediaUrl0 || body.media_url || null,\n  mediaType: body.MediaContentType0 || body.media_type || null\n};\n\n// Clean phone number\nmessage.phone = message.from.replace('whatsapp:', '').replace(/[^0-9+]/g, '');\n\nreturn [{ json: message }];"
      }
    },
    {
      "id": "get_customer_context",
      "name": "Get Customer Context",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [860, 200],
      "parameters": {
        "operation": "getAll",
        "tableId": "customers",
        "returnAll": false,
        "limit": 1,
        "filterType": "manual",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "phone",
              "condition": "equals",
              "keyValue": "={{$json.phone}}"
            }
          ]
        }
      },
      "credentials": {
        "supabaseApi": {
          "id": "supabase_cred",
          "name": "Supabase (CallWaiting)"
        }
      }
    },
    {
      "id": "check_existing_customer",
      "name": "Check If Existing Customer",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1080, 200],
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.length}}",
              "operation": "greaterThan",
              "value2": 0
            }
          ]
        }
      }
    },
    {
      "id": "create_new_customer",
      "name": "Create New Customer Record",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [1300, 280],
      "parameters": {
        "operation": "insert",
        "tableId": "customers",
        "data": "={\n  \"phone\": \"{{$node['Parse WhatsApp Message'].json.phone}}\",\n  \"channel\": \"whatsapp\",\n  \"first_contact\": \"{{$node['Parse WhatsApp Message'].json.timestamp}}\",\n  \"status\": \"active\"\n}",
        "options": {}
      },
      "credentials": {
        "supabaseApi": {
          "id": "supabase_cred",
          "name": "Supabase (CallWaiting)"
        }
      }
    },
    {
      "id": "merge_customer_data",
      "name": "Merge Customer Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1520, 200],
      "parameters": {
        "functionCode": "// Merge existing or new customer data with message\nconst message = $node['Parse WhatsApp Message'].json;\nconst customer = $json[0] || $json;\n\nreturn [{\n  json: {\n    message,\n    customer,\n    context: {\n      is_new_customer: !customer.id,\n      previous_messages: customer.message_count || 0,\n      last_contact: customer.last_contact || null\n    }\n  }\n}];"
      }
    },
    {
      "id": "send_to_ai_openai",
      "name": "Send to AI (OpenAI GPT-4)",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [1740, 200],
      "parameters": {
        "operation": "message",
        "modelId": "gpt-4-turbo-preview",
        "messages": {
          "values": [
            {
              "role": "system",
              "content": "=You are a friendly AI receptionist for CallWaiting AI. You help customers who sell on TikTok and Shopify by answering questions about our AI voice assistant service.\n\nKey Info:\n- We offer 24/7 AI voice receptionists that handle calls, DMs, and bookings\n- Pricing: $300 Starter (1 channel), $500 Pro (multi-channel)\n- Setup time: 48 hours\n- Free trial available\n- Integrates with TikTok DM, WhatsApp, Phone\n\nTone: Friendly, helpful, brief. Use emojis sparingly. Keep responses under 160 characters when possible for SMS.\n\nIf asked to book/schedule: Provide Calendly link from context.\nIf asked about pricing: Explain plans and share payment links.\nIf technical issue: Escalate to human support."
            },
            {
              "role": "user",
              "content": "={{$json.message.body}}"
            }
          ]
        },
        "options": {
          "temperature": 0.7,
          "maxTokens": 150
        }
      },
      "credentials": {
        "openAiApi": {
          "id": "openai_cred",
          "name": "OpenAI (CallWaiting)"
        }
      }
    },
    {
      "id": "send_whatsapp_reply",
      "name": "Send WhatsApp Reply (Twilio)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [1960, 200],
      "parameters": {
        "method": "POST",
        "url": "=https://api.twilio.com/2010-04-01/Accounts/{{$env.TWILIO_ACCOUNT_SID}}/Messages.json",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "From",
              "value": "={{$node['Parse WhatsApp Message'].json.to}}"
            },
            {
              "name": "To",
              "value": "={{$node['Parse WhatsApp Message'].json.from}}"
            },
            {
              "name": "Body",
              "value": "={{$json.message.content}}"
            }
          ]
        },
        "options": {}
      },
      "credentials": {
        "httpBasicAuth": {
          "id": "twilio_basic_auth",
          "name": "Twilio Basic Auth"
        }
      }
    },
    {
      "id": "log_conversation",
      "name": "Log Conversation to Supabase",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [2180, 200],
      "parameters": {
        "operation": "insert",
        "tableId": "conversations",
        "data": "={\n  \"customer_phone\": \"{{$node['Parse WhatsApp Message'].json.phone}}\",\n  \"channel\": \"whatsapp\",\n  \"direction\": \"inbound\",\n  \"message_in\": \"{{$node['Parse WhatsApp Message'].json.body}}\",\n  \"message_out\": \"{{$node['Send to AI (OpenAI GPT-4)'].json.message.content}}\",\n  \"ai_model\": \"gpt-4-turbo\",\n  \"timestamp\": \"{{$node['Parse WhatsApp Message'].json.timestamp}}\",\n  \"message_id\": \"{{$node['Parse WhatsApp Message'].json.messageId}}\"\n}",
        "options": {}
      },
      "credentials": {
        "supabaseApi": {
          "id": "supabase_cred",
          "name": "Supabase (CallWaiting)"
        }
      }
    },
    {
      "id": "update_customer_stats",
      "name": "Update Customer Message Count",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [2180, 320],
      "parameters": {
        "operation": "update",
        "tableId": "customers",
        "filterType": "manual",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "phone",
              "condition": "equals",
              "keyValue": "={{$node['Parse WhatsApp Message'].json.phone}}"
            }
          ]
        },
        "data": "={\n  \"last_contact\": \"{{$node['Parse WhatsApp Message'].json.timestamp}}\",\n  \"message_count\": {{($node['Merge Customer Data'].json.customer.message_count || 0) + 1}}\n}",
        "options": {}
      },
      "credentials": {
        "supabaseApi": {
          "id": "supabase_cred",
          "name": "Supabase (CallWaiting)"
        }
      }
    }
  ],
  "connections": {
    "webhook_whatsapp": {
      "main": [[{ "node": "respond_200_wa", "type": "main", "index": 0 }]]
    },
    "respond_200_wa": {
      "main": [[{ "node": "parse_whatsapp_message", "type": "main", "index": 0 }]]
    },
    "parse_whatsapp_message": {
      "main": [[{ "node": "get_customer_context", "type": "main", "index": 0 }]]
    },
    "get_customer_context": {
      "main": [[{ "node": "check_existing_customer", "type": "main", "index": 0 }]]
    },
    "check_existing_customer": {
      "main": [
        [{ "node": "merge_customer_data", "type": "main", "index": 0 }],
        [{ "node": "create_new_customer", "type": "main", "index": 0 }]
      ]
    },
    "create_new_customer": {
      "main": [[{ "node": "merge_customer_data", "type": "main", "index": 0 }]]
    },
    "merge_customer_data": {
      "main": [[{ "node": "send_to_ai_openai", "type": "main", "index": 0 }]]
    },
    "send_to_ai_openai": {
      "main": [[{ "node": "send_whatsapp_reply", "type": "main", "index": 0 }]]
    },
    "send_whatsapp_reply": {
      "main": [
        [
          { "node": "log_conversation", "type": "main", "index": 0 },
          { "node": "update_customer_stats", "type": "main", "index": 0 }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-01-14T00:00:00.000Z",
  "versionId": "1"
}
