-- CallWaiting AI Analytics Baseline
-- Creates normalized event logging primitives in Supabase

begin;

create table if not exists public.analytics_events (
  id uuid primary key default uuid_generate_v4(),
  event_name text not null check (event_name <> ''),
  occurred_at timestamptz not null default now(),
  source text not null default 'unknown',
  actor_email text,
  actor_id uuid,
  payload jsonb,
  payload_hash text generated always as (md5(coalesce(payload::text, ''))) stored,
  metadata jsonb default '{}'::jsonb
);

create index if not exists analytics_events_event_name_idx on public.analytics_events (event_name, occurred_at desc);
create index if not exists analytics_events_actor_idx on public.analytics_events (actor_id, occurred_at desc);

create table if not exists public.analytics_event_audit (
  id bigint generated by default as identity primary key,
  analytics_event_id uuid references public.analytics_events(id) on delete cascade,
  inserted_at timestamptz not null default now(),
  inserted_by text not null default current_user
);

create or replace function public.log_analytics_event(
  event_name text,
  source text default 'unknown',
  actor_email text default null,
  actor_id uuid default null,
  payload jsonb default '{}'::jsonb,
  metadata jsonb default '{}'::jsonb
)
returns uuid
language plpgsql
security definer
set search_path = public
as $$
declare
  new_id uuid;
begin
  insert into public.analytics_events(event_name, source, actor_email, actor_id, payload, metadata)
  values (event_name, source, actor_email, actor_id, payload, metadata)
  returning id into new_id;

  insert into public.analytics_event_audit(analytics_event_id)
  values (new_id);

  return new_id;
end;
$$;

-- Row Level Security
alter table public.analytics_events enable row level security;
alter table public.analytics_event_audit enable row level security;

-- Role scaffolding (run once, idempotent)
do $$
begin
  if not exists (select 1 from pg_roles where rolname = 'analytics_reader') then
    create role analytics_reader;
  end if;
end
$$;

grant usage on schema public to analytics_reader;
grant select on public.analytics_events to analytics_reader;
grant select on public.analytics_event_audit to analytics_reader;

-- Policies: service_role can insert, analytics_reader read only
create policy if not exists analytics_events_service_insert on public.analytics_events
  for insert
  to service_role
  with check (true);

create policy if not exists analytics_events_service_select on public.analytics_events
  for select
  to service_role, analytics_reader
  using (true);

create policy if not exists analytics_event_audit_service_select on public.analytics_event_audit
  for select
  to service_role, analytics_reader
  using (true);

create policy if not exists analytics_event_audit_service_insert on public.analytics_event_audit
  for insert
  to service_role
  with check (true);

commit;
