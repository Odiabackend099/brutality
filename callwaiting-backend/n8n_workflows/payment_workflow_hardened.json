{
  "name": "CallWaiting ‚Ä¢ Flutterwave Payments (HARDENED)",
  "nodes": [
    {
      "id": "Webhook_Flw",
      "name": "Webhook (Flutterwave)",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [200, 280],
      "parameters": {
        "path": "flutterwave",
        "httpMethod": "POST",
        "responseMode": "lastNode",
        "options": {}
      },
      "notes": "CRITICAL: Set 'Response Mode' to 'On Received', enable 'Binary Data' toggle. Route directly to 'Respond 200 Immediately' for Flutterwave timeout compliance.",
      "webhookMethods": { "POST": true }
    },
    {
      "id": "Respond_200",
      "name": "Respond 200 Immediately",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [420, 280],
      "parameters": {
        "responseBody": "={\"received\": true}",
        "responseCode": 200
      }
    },
    {
      "id": "Fn_VerifyHeader",
      "name": "Verify verif-hash Header",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [640, 160],
      "parameters": {
        "functionCode": "// Flutterwave webhook signature verification with HMAC-SHA256\n// CRITICAL: Always .trim() both verif-hash header and secret to avoid whitespace mismatch\nconst crypto = require('crypto');\nconst headers = $json.headers || {};\nconst receivedSig = String(headers['verif-hash'] || headers['Verif-Hash'] || headers['VERIF-HASH'] || '').trim();\nconst secret = String($env.FLW_VERIF_HASH || '').trim();\nconst rawBody = JSON.stringify($json.body || $json);\n\n// Compute HMAC-SHA256 of raw body with secret\nconst expectedSig = crypto\n  .createHmac('sha256', secret)\n  .update(rawBody)\n  .digest('base64');\n\n// Compare signatures (both trimmed)\nif (!receivedSig || receivedSig !== expectedSig) {\n  return [{ \n    json: { \n      valid: false, \n      reason: 'signature-mismatch',\n      received: receivedSig,\n      expected: expectedSig.substring(0, 10) + '...',\n      headers: Object.keys(headers),\n      bodySize: rawBody.length\n    } \n  }];\n}\n\n// Optional: Check timestamp freshness (if available)\nconst payload = $json.body || $json;\nif (payload.timestamp) {\n  const now = Date.now();\n  const webhookTime = new Date(payload.timestamp).getTime();\n  const ageSeconds = (now - webhookTime) / 1000;\n  \n  if (ageSeconds > 60) {\n    return [{ \n      json: { \n        valid: false, \n        reason: 'webhook-too-old',\n        ageSeconds: Math.round(ageSeconds)\n      } \n    }];\n  }\n}\n\nreturn [{ json: { valid: true, body: payload } }];"
      }
    },
    {
      "id": "IF_Valid",
      "name": "IF valid",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [860, 160],
      "parameters": {
        "conditions": { "boolean": [ { "value1": "={{$json.valid}}", "operation": "isTrue" } ] }
      }
    },
    {
      "id": "Email_BadSig",
      "name": "Alert ‚Ä¢ Bad Signature",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2,
      "position": [1060, 280],
      "parameters": {
        "fromEmail": "no-reply@callwaitingai.dev",
        "toEmail": "={{$env.ALERT_EMAIL}}",
        "subject": "‚ö†Ô∏è Flutterwave Webhook FAILED Signature",
        "text": "Reason: {{$json.reason}}\nReceived Hash: {{$json.received}}\nHeaders: {{JSON.stringify($json.headers)}}\nBody: {{JSON.stringify($json.body)}}"
      },
      "credentials": { "emailSmtp": { "id": "SMTP_GMAIL", "name": "Gmail SMTP (app pw)" } }
    },
    {
      "id": "Fn_ExtractIds",
      "name": "Extract IDs",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1060, 60],
      "parameters": {
        "functionCode": "const d = $json.body?.data || $json.data || {};\nreturn [{ \n  json: { \n    tx_id: String(d.id||''), \n    tx_ref: d.tx_ref || null \n  } \n}];"
      }
    },
    {
      "id": "HTTP_Verify",
      "name": "Flutterwave ‚Ä¢ Verify Transaction",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1280, 60],
      "parameters": {
        "url": "={{`https://api.flutterwave.com/v3/transactions/${$json.tx_id}/verify`}}",
        "method": "GET",
        "options": { "timeout": 30000 },
        "authentication": "predefinedCredentialType",
        "sendBinaryData": false,
        "credentials": "httpBasicAuth"
      }
    },
    {
      "id": "Fn_ValidatePayment",
      "name": "Validate Payment Fields",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1500, 60],
      "parameters": {
        "functionCode": "const v = $json.data || {};\nconst cust = v.customer || {};\n\n// Check status first\nconst statusOk = (v.status || '').toLowerCase() === 'successful';\nif (!statusOk) {\n  throw new Error(`Payment not successful: ${v.status}`);\n}\n\n// Infer plan (prefer tx_ref, fallback to amount)\nlet plan = null;\nconst ref = (v.tx_ref || '').toLowerCase();\nif (ref.includes('starter')) plan = 'starter';\nif (ref.includes('pro')) plan = 'pro';\n\n// Fallback by amount (brittle but necessary for Payment Links)\nif (!plan) {\n  const amt = Number(v.amount);\n  if (amt === 300) plan = 'starter';\n  if (amt === 500) plan = 'pro';\n}\n\nreturn [{\n  json: {\n    full_name: cust.name || null,\n    email: cust.email || null,\n    amount: v.amount || null,\n    currency: v.currency || null,  // Don't default to USD\n    plan,\n    transaction_ref: v.tx_ref || null,\n    flutterwave_id: String(v.id || ''),\n    status: v.status || null,\n    verified: true,\n    payload: $json\n  }\n}];"
      }
    },
    {
      "id": "Supabase_Upsert",
      "name": "Supabase ‚Ä¢ Upsert Payment",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [1720, 60],
      "parameters": {
        "operation": "upsert",
        "schema": "public",
        "table": "payments_callwaiting",
        "columns": "full_name,email,amount,currency,plan,transaction_ref,flutterwave_id,status,verified,payload",
        "updateOnConflict": true,
        "conflictIgnore": false,
        "conflictHandling": "update",
        "conflictTarget": "flutterwave_id",
        "returnFields": "id,flutterwave_id,transaction_ref"
      },
      "credentials": { "supabaseApi": { "id": "SUPABASE_SERVICE", "name": "Supabase (service role)" } },
      "notes": "IDEMPOTENCY: Uses flutterwave_id as conflict target. Duplicate webhooks will update existing record, not create duplicates."
    },
    {
      "id": "Email_Customer",
      "name": "Email ‚Ä¢ Customer",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2,
      "position": [1940, 60],
      "parameters": {
        "fromEmail": "CallWaiting AI <no-reply@callwaitingai.dev>",
        "toEmail": "={{$json.email}}",
        "subject": "Payment Received ‚Äì Book Your CallWaiting AI Setup",
        "text": "Hi {{$json.full_name || 'there'}},\\n\\nThank you for your payment of {{$json.amount}} {{$json.currency}} for the {{$json.plan || 'CallWaiting AI'}} plan!\\n\\nNext step: Book your 15-minute setup call here:\\n{{$env.CALENDLY_LINK}}\\n\\nYour reference: {{$json.transaction_ref}}\\n\\n‚Äî CallWaiting AI Team"
      },
      "credentials": { "emailSmtp": { "id": "SMTP_GMAIL", "name": "Gmail SMTP (app pw)" } }
    },
    {
      "id": "Email_Internal",
      "name": "Email ‚Ä¢ Internal Alert",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2,
      "position": [2140, 60],
      "parameters": {
        "fromEmail": "no-reply@callwaitingai.dev",
        "toEmail": "={{$env.ALERT_EMAIL}}",
        "subject": "üí∞ New Payment: {{$json.plan}} ‚Äì {{$json.amount}} {{$json.currency}}",
        "text": "Customer: {{$json.full_name}}\\nEmail: {{$json.email}}\\nPlan: {{$json.plan}}\\nAmount: {{$json.amount}} {{$json.currency}}\\nStatus: {{$json.status}}\\nRef: {{$json.transaction_ref}}\\nFLW ID: {{$json.flutterwave_id}}"
      },
      "credentials": { "emailSmtp": { "id": "SMTP_GMAIL", "name": "Gmail SMTP (app pw)" } }
    }
  ],
  "connections": {
    "Webhook (Flutterwave)": { "main": [ [ { "node": "Respond 200 Immediately", "type": "main", "index": 0 } ] ] },
    "Respond 200 Immediately": { "main": [ [ { "node": "Verify verif-hash Header", "type": "main", "index": 0 } ] ] },
    "Verify verif-hash Header": { "main": [ [ { "node": "IF valid", "type": "main", "index": 0 } ] ] },
    "IF valid": {
      "main": [
        [ { "node": "Extract IDs", "type": "main", "index": 0 } ],
        [ { "node": "Alert ‚Ä¢ Bad Signature", "type": "main", "index": 0 } ]
      ]
    },
    "Extract IDs": { "main": [ [ { "node": "Flutterwave ‚Ä¢ Verify Transaction", "type": "main", "index": 0 } ] ] },
    "Flutterwave ‚Ä¢ Verify Transaction": { "main": [ [ { "node": "Validate Payment Fields", "type": "main", "index": 0 } ] ] },
    "Validate Payment Fields": { "main": [ [ { "node": "Supabase ‚Ä¢ Upsert Payment", "type": "main", "index": 0 } ] ] },
    "Supabase ‚Ä¢ Upsert Payment": { "main": [ [ { "node": "Email ‚Ä¢ Customer", "type": "main", "index": 0 } ] ] },
    "Email ‚Ä¢ Customer": { "main": [ [ { "node": "Email ‚Ä¢ Internal Alert", "type": "main", "index": 0 } ] ] }
  },
  "settings": { "executionOrder": "v1" }
}
